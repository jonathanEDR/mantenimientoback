/**
 * Script para crear √≠ndices MongoDB desde Node.js
 * Ejecutar: node crear-indices.js
 */

const { MongoClient } = require('mongodb');
require('dotenv').config();

async function crearIndices() {
  const uri = process.env.MONGODB_URI || 'mongodb://127.0.0.1:27017/MantenimientosDB';
  const client = new MongoClient(uri);

  try {
    console.log('üîó Conectando a MongoDB...');
    await client.connect();
    
    const db = client.db('MantenimientosDB');
    console.log('‚úÖ Conectado a la base de datos');

    console.log('\nüìä Creando √≠ndices cr√≠ticos...');

    // Funci√≥n helper para crear √≠ndices sin fallar si ya existen
    async function crearIndiceSeguro(collection, index, nombre) {
      try {
        await collection.createIndex(index);
        console.log(`  ‚úÖ ${nombre} creado`);
      } catch (error) {
        if (error.message.includes('existing index')) {
          console.log(`  ‚ö†Ô∏è  ${nombre} ya existe (OK)`);
        } else {
          console.log(`  ‚ùå Error en ${nombre}: ${error.message}`);
        }
      }
    }

    // √çndices para aeronaves
    console.log('üìã Creando √≠ndices para aeronaves...');
    await crearIndiceSeguro(db.collection('aeronaves'), { "estado": 1, "createdAt": -1 }, "estado+createdAt");
    await crearIndiceSeguro(db.collection('aeronaves'), { "tipo": 1, "estado": 1 }, "tipo+estado");
    // Saltamos matricula porque ya existe como √∫nico
    console.log('‚úÖ √çndices de aeronaves procesados');

    // √çndices para componentes
    console.log('üìã Creando √≠ndices para componentes...');
    await crearIndiceSeguro(db.collection('componentes'), { "aeronaveActual": 1, "estado": 1 }, "aeronave+estado");
    await crearIndiceSeguro(db.collection('componentes'), { "alertasActivas": 1, "estado": 1 }, "alertas+estado");
    await crearIndiceSeguro(db.collection('componentes'), { "categoria": 1, "estado": 1 }, "categoria+estado");
    await crearIndiceSeguro(db.collection('componentes'), { "numeroSerie": 1 }, "numeroSerie");
    await crearIndiceSeguro(db.collection('componentes'), { "createdAt": -1 }, "createdAt");
    
    // √çndice compuesto cr√≠tico
    await crearIndiceSeguro(db.collection('componentes'), { 
      "aeronaveActual": 1, 
      "estado": 1, 
      "alertasActivas": 1 
    }, "compuesto-cr√≠tico");
    console.log('‚úÖ √çndices de componentes procesados');

    // √çndices para estados de monitoreo
    console.log('üìã Creando √≠ndices para estados de monitoreo...');
    await crearIndiceSeguro(db.collection('estadomonitoreocomponentes'), { 
      "componenteId": 1, 
      "alertaActiva": 1 
    }, "componente+alerta");
    await crearIndiceSeguro(db.collection('estadomonitoreocomponentes'), { 
      "componenteId": 1, 
      "catalogoControlId": 1 
    }, "componente+catalogo");
    await crearIndiceSeguro(db.collection('estadomonitoreocomponentes'), { "alertaActiva": 1 }, "alertaActiva");
    console.log('‚úÖ √çndices de estados de monitoreo procesados');

    // √çndices para cat√°logo de control
    console.log('üìã Creando √≠ndices para cat√°logo de control...');
    await crearIndiceSeguro(db.collection('catalogocontrolmonitoreos'), { "estado": 1 }, "estado");
    console.log('‚úÖ √çndices de cat√°logo de control procesados');

    console.log('\nüéâ ¬°TODOS LOS √çNDICES CR√çTICOS CREADOS EXITOSAMENTE!');
    
    // Verificar √≠ndices creados
    console.log('\nüìã Verificando √≠ndices creados:');
    
    const indicesAeronaves = await db.collection('aeronaves').indexes();
    console.log(`‚úÖ Aeronaves: ${indicesAeronaves.length} √≠ndices`);
    
    const indicesComponentes = await db.collection('componentes').indexes();
    console.log(`‚úÖ Componentes: ${indicesComponentes.length} √≠ndices`);
    
    const indicesEstados = await db.collection('estadomonitoreocomponentes').indexes();
    console.log(`‚úÖ Estados monitoreo: ${indicesEstados.length} √≠ndices`);

    console.log('\nüöÄ Base de datos optimizada para alto rendimiento!');

  } catch (error) {
    console.error('‚ùå Error creando √≠ndices:', error.message);
    console.log('\nüîß Soluciones posibles:');
    console.log('1. Verificar que MongoDB est√© ejecut√°ndose');
    console.log('2. Verificar la cadena de conexi√≥n en .env');
    console.log('3. Verificar que la base de datos exista');
    process.exit(1);
  } finally {
    await client.close();
  }
}

// Ejecutar el script
crearIndices().catch(console.error);