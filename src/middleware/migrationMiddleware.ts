import { Request, Response, NextFunction } from 'express';
import { checkMigrationStatus, migrateUsersToNewSchema } from '../scripts/migrateUsersImproved';
import logger from '../utils/logger';

// Cache para evitar verificaciones frecuentes
let lastMigrationCheck = 0;
let migrationInProgress = false;
const MIGRATION_CHECK_INTERVAL = 5 * 60 * 1000; // 5 minutos

/**
 * Middleware para asegurar migraci√≥n autom√°tica de usuarios
 * Se ejecuta de manera as√≠ncrona para no bloquear requests
 */
export const ensureUserMigration = async (req: Request, res: Response, next: NextFunction) => {
  const now = Date.now();
  
  // Verificar si es tiempo de revisar migraci√≥n
  if (!migrationInProgress && (now - lastMigrationCheck) > MIGRATION_CHECK_INTERVAL) {
    lastMigrationCheck = now;
    
    // Ejecutar verificaci√≥n en background
    setImmediate(async () => {
      try {
        migrationInProgress = true;
        const needsMigration = await checkMigrationStatus();
        
        if (needsMigration) {
          logger.info('üîÑ Iniciando migraci√≥n autom√°tica de usuarios en background...');
          await migrateUsersToNewSchema();
          logger.info('‚úÖ Migraci√≥n autom√°tica completada');
        }
      } catch (error) {
        logger.error('‚ùå Error en migraci√≥n autom√°tica:', error);
      } finally {
        migrationInProgress = false;
      }
    });
  }
  
  next();
};

/**
 * Middleware para forzar migraci√≥n en rutas cr√≠ticas de usuarios
 * Se ejecuta de manera s√≠ncrona solo en rutas espec√≠ficas
 */
export const forceUserMigrationSync = async (req: Request, res: Response, next: NextFunction) => {
  try {
    if (!migrationInProgress) {
      migrationInProgress = true;
      const needsMigration = await checkMigrationStatus();
      
      if (needsMigration) {
        logger.warn('‚ö†Ô∏è Ejecutando migraci√≥n s√≠ncrona requerida para operaci√≥n cr√≠tica');
        await migrateUsersToNewSchema();
      }
    }
    next();
  } catch (error) {
    logger.error('‚ùå Error en migraci√≥n s√≠ncrona:', error);
    // No fallar la request, continuar sin migraci√≥n
    next();
  } finally {
    migrationInProgress = false;
  }
};